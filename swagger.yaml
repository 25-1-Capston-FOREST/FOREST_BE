openapi: 3.0.0
info:
  title: FOREST API
  description: FOREST API 서버 문서
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: 로컬 서버
paths:
  /api/book:
    post:
      summary: 여가 예약 추가
      description: 사용자가 여가 예약을 추가할 수 있는 API입니다. 동일한 예약이 이미 존재하는 경우 중복 오류를 반환합니다.
      operationId: handleAddBook
      tags:
        - User Activity
      security:
        - bearerAuth: [] # 이 경로는 인증이 필요함
      requestBody:
        description: 여가 예약 정보를 담은 JSON 객체
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                activityDate:
                  type: string
                  description: 예약할 날짜 (ISO 8601 형식)
                  example: "2025-03-05 00:00:00"
      parameters:
        - in: query
          name: id
          description: 예약할 활동의 id (activity_id)
          required: true
          schema:
            type: string
            example: "1"
      responses:
        200:
          description: 예약이 성공적으로 추가된 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "예약이 성공적으로 추가되었습니다."
                  data:
                    type: object
                    properties:
                      user_activity_id:
                        type: string
                        example: "1"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "1"
        400:
          description: 유효하지 않은 입력값
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "activityId가 필요합니다"
        401:
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
        409:
          description: 중복 예약 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "이미 해당 예약이 존재합니다."
        500:
          description: 서버 오류
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "예약 추가 오류"
    patch:
      summary: 여가 예약 날짜 수정
      description: 사용자의 여가 예약 날짜를 변경합니다.
      security:
        - bearerAuth: []
      tags: 
        - User Activity
      parameters:
        - name: id
          in: query
          required: true
          description: 수정할 예약의 id (user_activity_id)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                activityDate:
                  type: string
                  format: date-time
                  description: 변경할 예약 날짜 (ISO 8601 형식)
                  example: "2025-01-01 00:00:00"
      responses:
        "200":
          description: 여가 예약 날짜가 성공적으로 변경됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "여가 예약 날짜가 성공적으로 변경되었습니다."
                  data:
                    type: object
                    properties:
                      user_activity_id:
                        type: string
                        example: "16"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "2"
                      activity_status:
                        type: integer
                        example: 0
                      activity_date:
                        type: string
                        format: date-time
                        example: "2025-03-06T10:00:00.000Z"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T01:04:41.000Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T01:43:13.000Z"
        "400":
          description: 잘못된 요청 (id 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "id값이 쿼리에 필요합니다"
        "401":
          description: 잘못된 요청 (activityDate 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "수정할 date값이 필요합니다"
        "409":
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
    delete:
      summary: 여가 예약 취소
      description: 특정 사용자의 여가 예약을 취소합니다.
      tags:
        - User Activity
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: 취소할 예약의 id (user_activity_id)
          schema:
            type: string
      responses:
        "200":
          description: 여가 예약이 성공적으로 취소됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "여가 예약이 성공적으로 취소되었습니다."
                  data:
                    type: object
                    properties:
                      user_activity_id:
                        type: string
                        example: "16"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "2"
                      activity_status:
                        type: integer
                        example: 1
                      activity_date:
                        type: string
                        format: date-time
                        example: "2025-03-06T10:00:00.000Z"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T01:04:41.000Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T02:13:02.000Z"
        "400":
          description: 잘못된 요청 (id 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "id가 쿼리에 필요합니다."
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
  /api/user/activities:
    get:
      summary: 사용자 여가 목록 조회
      description: 사용자의 특정 상태(status)에 해당하는 여가 활동 목록을 조회합니다.
      tags:
        - User Activity
      security:
        - bearerAuth: [] # 이 경로는 인증이 필요함
      parameters:
        - name: status
          in: query
          required: true
          description: 여가 상태 (0 예약, 1 완료됨)
          schema:
            type: integer
            enum: [0, 1]
      responses:
        "200":
          description: 성공적으로 여가 목록을 조회한 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "사용자 여가 목록이 성공적으로 조회되었습니다."
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        activity_id:
                          type: string
                          description: 여가 활동 ID
                          example: "1"
                        activity_type:
                          type: string
                          description: 여가 활동 유형 (예: 영화, 공연, 전시)
                          example: "movie"
                        activity_date:
                          type: string
                          format: date-time
                          description: 여가 활동 날짜
                          example: "2025-03-05T09:00:00.000Z"
                        detailedInfo:
                          type: object
                          description: 여가 활동 상세 정보
                          properties:
                            movie_id:
                              type: string
                              description: 영화 ID
                              example: "1"
                            activity_id:
                              type: string
                              description: 활동 ID
                              example: "1"
                            title:
                              type: string
                              description: 영화 제목
                              example: "testMovie1"
                            image_url:
                              type: string
                              nullable: true
                              description: 이미지 URL (없을 수도 있음)
                              example: null
                            movie_genre:
                              type: array
                              items:
                                type: string
                              description: 영화 장르 목록
                              example: ["genre1", "genre2"]
                            time:
                              type: string
                              format: date-time
                              description: 영화 시작 시간
                              example: "2025-03-04T19:30:00.000Z"
                            location:
                              type: string
                              description: 영화 상영 장소
                              example: "test"
                            created_at:
                              type: string
                              format: date-time
                              description: 생성 시간
                              example: "2025-03-04T14:50:22.000Z"
                            updated_at:
                              type: string
                              format: date-time
                              description: 수정 시간
                              example: "2025-03-04T14:50:22.000Z"
                        isWished:
                          type: boolean
                          description: 사용자가 해당 활동을 찜했는지 여부
                          example: false
        "400":
          description: status 값이 제공되지 않은 경우
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "status가 필요합니다"
        "401":
          description: 인증되지 않은 사용자
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
        "500":
          description: 서버 오류 발생
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "서버 내부 오류"
  /api/user/activity:
    patch:
      summary: 여가 완료 처리
      description: 특정 사용자의 여가 상태를 '완료'로 변경합니다.
      tags:
        - User Activity
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: 완료 처리할 예약의 id (user_activity_id)
          schema:
            type: string
      responses:
        "200":
          description: 여가가 성공적으로 완료 처리됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "여가가 성공적으로 완료 처리되었습니다."
                  data:
                    type: object
                    properties:
                      user_activity_id:
                        type: string
                        example: "16"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "2"
                      activity_status:
                        type: integer
                        example: 1
                      activity_date:
                        type: string
                        format: date-time
                        example: "2025-03-06T10:00:00.000Z"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T01:04:41.000Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T02:08:08.000Z"
        "400":
          description: 잘못된 요청 (id 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "id가 쿼리에 필요합니다."
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
  /api/wish:
    post:
      summary: 여가 찜하기
      description: 특정 사용자의 찜 목록에 여가를 추가합니다.
      tags:
        - WishList
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: 찜할 활동의 id (activity_id)
          schema:
            type: string
      responses:
        "200":
          description: 여가가 성공적으로 찜됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "여가를 성공적으로 찜했습니다."
                  data:
                    type: object
                    properties:
                      wish_id:
                        type: string
                        example: "4"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "2"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T09:31:43.000Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T09:31:43.000Z"
        "400":
          description: 잘못된 요청 (id 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "id가 쿼리에 필요합니다."
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
        "409":
          description: 이미 찜한 여가
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "이미 찜하기 된 예약입니다."
    delete:
      summary: 여가 찜 삭제
      description: 사용자가 찜한 여가를 찜 목록에서 삭제합니다.
      tags:
        - WishList
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: true
          description: 삭제할 찜의 id (wish_id)
          schema:
            type: string
      responses:
        "200":
          description: 여가가 성공적으로 찜 목록에서 삭제됨
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "여가를 성공적으로 찜 목록에서 삭제했습니다."
                  data:
                    type: object
                    properties:
                      wish_id:
                        type: string
                        example: "9"
                      user_id:
                        type: string
                        example: "1"
                      activity_id:
                        type: string
                        example: "3"
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T10:20:41.000Z"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-03-05T10:20:41.000Z"
        "400":
          description: 잘못된 요청 (id 값이 없음)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "id가 쿼리에 필요합니다."
        "401":
          description: 인증 실패
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "사용자 인증 실패"
        "404":
          description: 찜 목록에 없는 여가
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "해당 여가가 찜 목록에 없습니다."
    